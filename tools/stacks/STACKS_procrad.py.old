#!/usr/bin/env python

import sys
import os, re
import tempfile, subprocess, glob
import shutil
import optparse
from os.path import basename
import zipfile, tarfile, gzip
from stacks import *

"""

Created by Cyril Monjeaud
Cyril.Monjeaud@irisa.fr

Last modifications : 01/10/2014

WARNING :

STACKS_procrad.py needs:

- STACKS scripts in your $PATH

These scripts are available after compiling the sources of STACKS :

http://creskolab.uoregon.edu/stacks/

or with the galaxy_stacks package in the Genouest toolshed (http://toolshed.genouest.org)


"""
def __main__():

	# arguments recuperation
	parser = optparse.OptionParser()
	parser.add_option("--input_type")
	parser.add_option("--input_enzyme")
   	parser.add_option("--input_single")
	parser.add_option("--input_paired1")
	parser.add_option("--input_paired2")
	parser.add_option("--inputype")
	parser.add_option("--sample_name")
	parser.add_option("--barcode")
	parser.add_option("--output_choice")
	parser.add_option("--output_archive")
	parser.add_option("--enzyme1")
	parser.add_option("--enzyme2")
	parser.add_option("--outype")
	parser.add_option("--qualitenc")
	parser.add_option("--D")
	parser.add_option("--t", default='-1')
	parser.add_option("--q", default="")
	parser.add_option("--discard_file")
	parser.add_option("--r", default="")
	parser.add_option("--w", default="-w 0.15")
	parser.add_option("--s", default="-s 10")
	parser.add_option("--c", default="")
	parser.add_option("--inline_null", default="--inline_null")
	parser.add_option("--index_null", default="")
	parser.add_option("--inline_inline", default="")
	parser.add_option("--index_index", default="")
	parser.add_option("--inline_index", default="")
	parser.add_option("--index_inline", default="")
	parser.add_option("--logfile")
	(options, args) = parser.parse_args()

	# create the working dir
	os.mkdir("inputs")
	os.mkdir("job_outputs")
	os.mkdir("galaxy_outputs")

	cmd_line = []
	cmd_line.append("process_radtags")
 	cmd_line.extend(["-p", "inputs"])
        cmd_line.extend(["-i", options.inputype])
        cmd_line.extend(["-b", options.barcode])

	# parse config files and create symlink into the temp dir
	if options.input_type=="single":

		# load the config file
		input_single = options.input_single

		#parse the input_file to extract filenames and filepaths
		tab_files=galaxy_config_to_tabfiles(input_single)

		#create symlink into the temp dir
		create_symlinks_from_tabfiles(tab_files, "inputs")
		
	else:
		# load config files
		input_paired1 = options.input_paired1
		input_paired2 = options.input_paired2

		#parse the input_file to extract filenames and filepaths
		tab_files_paired1=galaxy_config_to_tabfiles(input_paired1)
		tab_files_paired2=galaxy_config_to_tabfiles(input_paired2)
		
		#create symlinks into the temp dir
		create_symlinks_from_tabfiles(tab_files_paired1, "inputs")
		create_symlinks_from_tabfiles(tab_files_paired2, "inputs")
		
		cmd_line.append("-P")

	# test nb enzyme
	if options.input_enzyme=="1":
		cmd_line.extend(["-e", options.enzyme1])

	if options.input_enzyme=="2":
                cmd_line.extend(["---renz_1", options.enzyme1, "--renz_2", options.enzyme2])
	
	# quality
	cmd_line.extend(["-E", options.qualitenc])
		
	# test truncate value
	if options.t!="-1":
		cmd_line.extend(["-t", options.t])

	cmd_line.extend(["-o", "job_outputs/"])
        cmd_line.extend(["-y", options.outype])
	cmd_line.extend([options.D, options.q, options.r, options.w, options.s, options.c, options.inline_null, options.index_null, options.inline_inline ,options.index_index, options.inline_index, options.index_inline])

	print "[CMD_LINE] : "+" ".join(cmd_line)

	# command line
	#cmd = 'process_radtags -p inputs '+paired+' -i '+options.inputype+' -b '+options.barcode+' -o job_outputs/ '+enz+' '+qual+' -y '+options.outype+' '+options.D+' '+truncate_value+' '+options.q+' '+options.r+' '+options.w+' '+options.s+' '+options.c+' '+options.inline_null+' '+options.index_null+' '+options.inline_inline+' '+options.index_index+' '+options.inline_index+' '+options.index_inline+' 2>&1'	
	#proc = subprocess.Popen( args=cmd, shell=True )
	#returncode = proc.wait()

	p=subprocess.Popen(cmd_line, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	stdoutput, stderror = p.communicate()

	print stdoutput
	print stderror 

	# postprocesses

	try:
		shutil.move('job_outputs/process_radtags.log', options.logfile)
	except:
                sys.stderr.write('Error in process_radtags execution; Please read the additional output (stdout)\n')

	if options.discard_file :
		discards_file_name=glob.glob('job_outputs/*.discards')[0]
		shutil.move(discards_file_name, options.discard_file)

	# manage outputs names
	change_outputs_procrad_name(os.getcwd()+'/job_outputs', options.sample_name)

	# generate additional output archive file
	if options.output_choice!="1":
		generate_additional_archive_file(os.getcwd()+'/job_outputs', options.output_archive)

	# if user has not choose the only zip archive
        if options.output_choice != "3":
		list_files = glob.glob('job_outputs/*')
		for i in list_files:
			shutil.move(i, 'galaxy_outputs')


if __name__ == "__main__": __main__()
